def digital_sort(a, ab_length):          
    digits = get_digits(max(a))
    
    tmp_a = a[:]
    offsets = [0] * 256
    for d in range(digits):
        counting_sort(a, tmp_a, ab_length, offsets, d)
        xx = a
        a = tmp_a
        tmp_a = xx

    return a


def counting_sort(a, tmp_a, ab_length, offsets, d):
    C = [0] * 256
    base = 8 * d
    
    for el in a:
        C[(el >> (base)) & 255] += 1
        
    counting = 0
    for i in range(256):
        offsets[i] = counting
        counting += C[i]        

    for el in a:
        key = (el >> (base)) & 255
        tmp_a[offsets[key]] = el
        offsets[key] += 1

    return tmp_a


def get_digits(n):
    count = 0
    while n:
        n, r = n // 256, n % 256
        count += 1
        
    return count


from edx_io import edx_io

with edx_io() as io:
    n = io.next_int()
    m = io.next_int()
    ab_length = n * m
    
    a = [0] * n
    b = [0] * m
    ab = [0] * ab_length
    
    for i in range (0, n):
        a[i] = io.next_int()
        
    for i in range (0, m):
        b[i] = io.next_int()
    
    position = 0
    for i in range (0, n):
        for j in range (0, m):
            ab[position] = a[i] * b[j]
            position += 1
    
    sorted_ab = digital_sort(ab, ab_length)

    result = 0
    for i in range(0, ab_length, 10):
        result += sorted_ab[i]

    io.writeln(result)  
